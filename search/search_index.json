{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Seaweed-Growth-Model The Seaweed Growth Model is a tool that simulates the potential growth of seaweed in the aftermath of a nuclear war. The output of the model can be used to identify areas where seaweed growth is be possible. This model can be useful for researchers, environmentalists, and disaster response teams who are interested in understanding the potential impact of nuclear war on marine life. The model is implemented in Python and can be easily integrated into other analysis and visualization tools. Installation To install the Seaweed Growth Model package, we recommend setting up a virtual environment. This will ensure that the package and its dependencies are isolated from other projects on your machine, which can prevent conflicts and make it easier to manage your dependencies. Here are the steps to follow: Create a virtual environment using either conda by running the command conda env create -f environment.yml . This will create an environment called \"seaweed-growth-model\". A virtual environment is like a separate Python environment, which you can think of as a separate \"room\" for your project to live in, it's own space which is isolated from the rest of the system, and it will have it's own set of packages and dependencies, that way you can work on different projects with different versions of packages without interfering with each other. Activate the environment by running conda activate seaweed-growth-model . This command will make the virtual environment you just created the active one, so that when you run any python command or install any package, it will do it within the environment. Install the package by running pip install -e . in the main folder of the repository. This command will install the package you are currently in as a editable package, so that when you make changes to the package, you don't have to reinstall it again. If you want to run the example Jupyter notebook, you'll need to create a kernel for the environment. First, install the necessary tools by running conda install -c anaconda ipykernel . This command will install the necessary tools to create a kernel for the Jupyter notebook. A kernel is a component of Jupyter notebook that allows you to run your code. It communicates with the notebook web application and the notebook document format to execute code and display the results. Then, create the kernel by running python -m ipykernel install --user --name=seaweed-growth-model . This command will create a kernel with the name you specified \"seaweed-growth-model\" , which you can use to run the example notebook or play around with the model yourself. You can now use the kernel \"seaweed-growth-model\" to run the example notebook or play around with the model yourself. If you are using the kernel and it fails due an import error for the model package, you might have to rerun: pip install -e . . If you encounter any issues, feel free to open an issue in the repository. How this model works in general This model here uses nuclear winter environmental data and an empirical model based on James and Boriah (2010) . It calculates the growth rate of Gracilaria tikvahiae on a global scale. The growth rate results are then used to simulate the scale-up of seaweed production. Example of usage An example notebook on how this model can be used can be found in the script folder . This example runs out of the box with the test data delivered with this repository. If you want to reproduce the results, you have to download the complete dataset. Getting the global data The data is available in a Zenodo Repository . Once you download it simply copy it to data/gridded_data_global folder. Once there, you can run the model with the global data. However, if you just want to play around with the model, there is a dataset available for testing directly in this repository. Pickle Format The data is stored in the pickle format to ensure a quick read time, as the overall dataset is several gigabytes large. Learn more about pickle here . Original data download The original data source is from Harrison et al. (2022) . The files provided here are a subset of the total dataset. The script on how the data was downloaded from the original source can be found here . Structure The code in this repository is split into three parts: The actual model The code for the actual model can be found in the model folder. It consists of three files: seaweed_growth.py : The equations of the empirical seaweed model by James and Boriah (2010). It can either do this for a single value or for a complete pandas series of values. ocean_section.py : Meant to represent a section of the ocean. It is agnostic about the size of this section. So, it can be either a grid cell or a large marine ecosystem. seaweed_model.py : Interface to actually run the model. It reads in the data you provide it with, calculates the seaweed growth rate and saves the calculation results to a file. Processing Mainly concerned with handling/prepping the data for and by the model. Preprocessing Reads in the raw data and transforms it into a format that can be understood by the model. Postprocessing Calls the model (this can also be seen as an example of usage), runs it, reads in the output of the model, clusters it using tslearn and saves it in a format more convenient for plotting. Reading/Writing Code to read and write files. Plotting Makes the plots for the publication. Flow Chart for Structure The following flow chart describes how different parts of this repository interact with each other and how data is transferred between them.","title":"Home"},{"location":"#seaweed-growth-model","text":"The Seaweed Growth Model is a tool that simulates the potential growth of seaweed in the aftermath of a nuclear war. The output of the model can be used to identify areas where seaweed growth is be possible. This model can be useful for researchers, environmentalists, and disaster response teams who are interested in understanding the potential impact of nuclear war on marine life. The model is implemented in Python and can be easily integrated into other analysis and visualization tools.","title":"Seaweed-Growth-Model"},{"location":"#installation","text":"To install the Seaweed Growth Model package, we recommend setting up a virtual environment. This will ensure that the package and its dependencies are isolated from other projects on your machine, which can prevent conflicts and make it easier to manage your dependencies. Here are the steps to follow: Create a virtual environment using either conda by running the command conda env create -f environment.yml . This will create an environment called \"seaweed-growth-model\". A virtual environment is like a separate Python environment, which you can think of as a separate \"room\" for your project to live in, it's own space which is isolated from the rest of the system, and it will have it's own set of packages and dependencies, that way you can work on different projects with different versions of packages without interfering with each other. Activate the environment by running conda activate seaweed-growth-model . This command will make the virtual environment you just created the active one, so that when you run any python command or install any package, it will do it within the environment. Install the package by running pip install -e . in the main folder of the repository. This command will install the package you are currently in as a editable package, so that when you make changes to the package, you don't have to reinstall it again. If you want to run the example Jupyter notebook, you'll need to create a kernel for the environment. First, install the necessary tools by running conda install -c anaconda ipykernel . This command will install the necessary tools to create a kernel for the Jupyter notebook. A kernel is a component of Jupyter notebook that allows you to run your code. It communicates with the notebook web application and the notebook document format to execute code and display the results. Then, create the kernel by running python -m ipykernel install --user --name=seaweed-growth-model . This command will create a kernel with the name you specified \"seaweed-growth-model\" , which you can use to run the example notebook or play around with the model yourself. You can now use the kernel \"seaweed-growth-model\" to run the example notebook or play around with the model yourself. If you are using the kernel and it fails due an import error for the model package, you might have to rerun: pip install -e . . If you encounter any issues, feel free to open an issue in the repository.","title":"Installation"},{"location":"#how-this-model-works-in-general","text":"This model here uses nuclear winter environmental data and an empirical model based on James and Boriah (2010) . It calculates the growth rate of Gracilaria tikvahiae on a global scale. The growth rate results are then used to simulate the scale-up of seaweed production.","title":"How this model works in general"},{"location":"#example-of-usage","text":"An example notebook on how this model can be used can be found in the script folder . This example runs out of the box with the test data delivered with this repository. If you want to reproduce the results, you have to download the complete dataset.","title":"Example of usage"},{"location":"#getting-the-global-data","text":"The data is available in a Zenodo Repository . Once you download it simply copy it to data/gridded_data_global folder. Once there, you can run the model with the global data. However, if you just want to play around with the model, there is a dataset available for testing directly in this repository.","title":"Getting the global data"},{"location":"#pickle-format","text":"The data is stored in the pickle format to ensure a quick read time, as the overall dataset is several gigabytes large. Learn more about pickle here .","title":"Pickle Format"},{"location":"#original-data-download","text":"The original data source is from Harrison et al. (2022) . The files provided here are a subset of the total dataset. The script on how the data was downloaded from the original source can be found here .","title":"Original data download"},{"location":"#structure","text":"The code in this repository is split into three parts:","title":"Structure"},{"location":"#the-actual-model","text":"The code for the actual model can be found in the model folder. It consists of three files: seaweed_growth.py : The equations of the empirical seaweed model by James and Boriah (2010). It can either do this for a single value or for a complete pandas series of values. ocean_section.py : Meant to represent a section of the ocean. It is agnostic about the size of this section. So, it can be either a grid cell or a large marine ecosystem. seaweed_model.py : Interface to actually run the model. It reads in the data you provide it with, calculates the seaweed growth rate and saves the calculation results to a file.","title":"The actual model"},{"location":"#processing","text":"Mainly concerned with handling/prepping the data for and by the model.","title":"Processing"},{"location":"#preprocessing","text":"Reads in the raw data and transforms it into a format that can be understood by the model.","title":"Preprocessing"},{"location":"#postprocessing","text":"Calls the model (this can also be seen as an example of usage), runs it, reads in the output of the model, clusters it using tslearn and saves it in a format more convenient for plotting.","title":"Postprocessing"},{"location":"#readingwriting","text":"Code to read and write files.","title":"Reading/Writing"},{"location":"#plotting","text":"Makes the plots for the publication.","title":"Plotting"},{"location":"#flow-chart-for-structure","text":"The following flow chart describes how different parts of this repository interact with each other and how data is transferred between them.","title":"Flow Chart for Structure"},{"location":"modules/src/utilities/","text":"prepare_geometry source .prepare_geometry( growth_df ) Prepares the geometry for the growth_df. For some reason the spatial data has a longitude that is 0-360 instead of -180 to 180. This function converts it to the latter Arguments growth_df : a dataframe of the growth rate Returns None, but saves the plot weighted_quantile source .weighted_quantile( data: pd.Series, weights: pd.Series, quantile: float ) Calculates the weighted quantile of s1 based on s2 Arguments data : pandas.Series - the series to calculate the quantile for weights : pandas.Series - the series to use as weights quantile : float - the quantile to calculate Returns float - the weighted quantile","title":"utilities"},{"location":"modules/src/utilities/#_1","text":"","title":""},{"location":"modules/src/utilities/#prepare_geometry","text":"source .prepare_geometry( growth_df ) Prepares the geometry for the growth_df. For some reason the spatial data has a longitude that is 0-360 instead of -180 to 180. This function converts it to the latter Arguments growth_df : a dataframe of the growth rate Returns None, but saves the plot","title":"prepare_geometry"},{"location":"modules/src/utilities/#weighted_quantile","text":"source .weighted_quantile( data: pd.Series, weights: pd.Series, quantile: float ) Calculates the weighted quantile of s1 based on s2 Arguments data : pandas.Series - the series to calculate the quantile for weights : pandas.Series - the series to use as weights quantile : float - the quantile to calculate Returns float - the weighted quantile","title":"weighted_quantile"},{"location":"modules/src/model/ocean_section/","text":"OceanSection source OceanSection( name, data ) Class the represents a section of the ocean. alculates for every section how quickly seaweed can grow and also saves the single factors for growth Methods: .calculate_factors source .calculate_factors() Calculates the factors and growth rate for the ocean section Arguments None Returns None .calculate_growth_rate source .calculate_growth_rate() Calculates the growth rate for the ocean section Arguments None Returns None .create_section_df source .create_section_df() Creates a dataframe that contains all the data for a given section This can only be run once the factors have been calculated Arguments None Returns None .calculate_mean_growth_rate source .calculate_mean_growth_rate() Calculates the mean growth rate and returns it Arguments None Returns the mean growth rate of the section .select_section_df_date source .select_section_df_date( month ) Selectes a date from the section df and returns it Arguments date : the date to select Returns the dataframe for the date","title":"ocean_section"},{"location":"modules/src/model/ocean_section/#_1","text":"","title":""},{"location":"modules/src/model/ocean_section/#oceansection","text":"source OceanSection( name, data ) Class the represents a section of the ocean. alculates for every section how quickly seaweed can grow and also saves the single factors for growth Methods:","title":"OceanSection"},{"location":"modules/src/model/ocean_section/#calculate_factors","text":"source .calculate_factors() Calculates the factors and growth rate for the ocean section Arguments None Returns None","title":".calculate_factors"},{"location":"modules/src/model/ocean_section/#calculate_growth_rate","text":"source .calculate_growth_rate() Calculates the growth rate for the ocean section Arguments None Returns None","title":".calculate_growth_rate"},{"location":"modules/src/model/ocean_section/#create_section_df","text":"source .create_section_df() Creates a dataframe that contains all the data for a given section This can only be run once the factors have been calculated Arguments None Returns None","title":".create_section_df"},{"location":"modules/src/model/ocean_section/#calculate_mean_growth_rate","text":"source .calculate_mean_growth_rate() Calculates the mean growth rate and returns it Arguments None Returns the mean growth rate of the section","title":".calculate_mean_growth_rate"},{"location":"modules/src/model/ocean_section/#select_section_df_date","text":"source .select_section_df_date( month ) Selectes a date from the section df and returns it Arguments date : the date to select Returns the dataframe for the date","title":".select_section_df_date"},{"location":"modules/src/model/seaweed_growth/","text":"growth_factor_combination_single_value source .growth_factor_combination_single_value( illumination_factor: float, temperature_factor: float, nutrient_factor: float, salinity_factor: float ) Calculates the actual production rate of the seaweed Arguments illumination_factor : the illumination factor temperature_factor : the temperature factor nutrient_factor : the nutrient factor salinity_factor : the salinity factor Returns fraction of the actual production rate the seaweed could reach in optimal circumstances growth_factor_combination source .growth_factor_combination( illumination_factor: pd.Series, temperature_factor: pd.Series, nutrient_factor: pd.Series, salinity_factor: pd.Series ) Calculates the actual production rate of the seaweed for a whole dataframe And returns it as a pandas series Arguments illumination_factor : the illumination factor temperature_factor : the temperature factor nutrient_factor : the nutrient factor salinity_factor : the salinity factor Returns fraction of the actual production rate the seaweed could illumination_single_value source .illumination_single_value( illumination: float ) Calculates the illumination factor for a single value based on an empirical model Arguments illumination : the illumination of the algae in W/m\u00b2 Returns The illumination factor calculate_illumination_factor source .calculate_illumination_factor( illumination: pd.Series ) Calculates the illumination factor for a whole series Arguments illumination : the illumination of the algae in W/m\u00b2 Returns The illumination factor as a pandas series temperature_single_value source .temperature_single_value( temperature: float ) Calculates the temperature factor for a single value based on an empirical model Arguments temperature : the temperature of the water in \u00b0C Returns The temperature factor as a float calculate_temperature_factor source .calculate_temperature_factor( temperature: pd.Series ) Calculates the temperature factor for a whole dataframe column Arguments temperature : the temperature of the water in celcius Returns The temperature factor as a pandas series nitrate_subfactor source .nitrate_subfactor( nitrate ) Calculates the nitrate subfactor for a single value Arguments nitrate : the nitrate concentration in mmol/m\u00b3 Returns The nitrate subfactor as a float phosphate_subfactor source .phosphate_subfactor( phosphate ) Calculates the phosphate subfactor for a single value Arguments phosphate : the phosphate concentration in mmol/m\u00b3 Returns The phosphate subfactor as a float ammonium_subfactor source .ammonium_subfactor( ammonium ) Calculates the ammonium subfactor for a single value Arguments ammonium : the ammonium concentration in mmol/m\u00b3 Returns The ammonium subfactor as a float calculate_nutrient_factor source .calculate_nutrient_factor( nitrate: pd.Series, ammonium: pd.Series, phosphate: pd.Series ) Calculates the nutrient factor for a whole series And returns the nutrient factor as a pandas series Arguments nitrate : the nitrate concentration in mmol/m\u00b3 ammonium : the ammonium concentration in mmol/m\u00b3 phosphate : the phosphate concentration in mmol/m\u00b3 Returns nutrient_factor : The nutrient factor as a pd.Series nitrate_subfactor: The nitrate subfactor as a pd.Series ammonium_subfactor: The ammonium subfactor as a pd.Series phosphate_subfactor: The phosphate subfactor as a pd.Series List of: salinity_single_value source .salinity_single_value( salinity: float ) Calculates the salinity factor for a single salinity value based on an empirical model Arguments salinity : the salinity of the water Returns The salinity factor as a float calculate_salinity_factor source .calculate_salinity_factor( salinity: pd.Series ) Calculates the salinity factor for a whole dataframe Arguments salinity : the salinity of the water in ppt Returns The salinity factor as a pandas series","title":"seaweed_growth"},{"location":"modules/src/model/seaweed_growth/#_1","text":"","title":""},{"location":"modules/src/model/seaweed_growth/#growth_factor_combination_single_value","text":"source .growth_factor_combination_single_value( illumination_factor: float, temperature_factor: float, nutrient_factor: float, salinity_factor: float ) Calculates the actual production rate of the seaweed Arguments illumination_factor : the illumination factor temperature_factor : the temperature factor nutrient_factor : the nutrient factor salinity_factor : the salinity factor Returns fraction of the actual production rate the seaweed could reach in optimal circumstances","title":"growth_factor_combination_single_value"},{"location":"modules/src/model/seaweed_growth/#growth_factor_combination","text":"source .growth_factor_combination( illumination_factor: pd.Series, temperature_factor: pd.Series, nutrient_factor: pd.Series, salinity_factor: pd.Series ) Calculates the actual production rate of the seaweed for a whole dataframe And returns it as a pandas series Arguments illumination_factor : the illumination factor temperature_factor : the temperature factor nutrient_factor : the nutrient factor salinity_factor : the salinity factor Returns fraction of the actual production rate the seaweed could","title":"growth_factor_combination"},{"location":"modules/src/model/seaweed_growth/#illumination_single_value","text":"source .illumination_single_value( illumination: float ) Calculates the illumination factor for a single value based on an empirical model Arguments illumination : the illumination of the algae in W/m\u00b2 Returns The illumination factor","title":"illumination_single_value"},{"location":"modules/src/model/seaweed_growth/#calculate_illumination_factor","text":"source .calculate_illumination_factor( illumination: pd.Series ) Calculates the illumination factor for a whole series Arguments illumination : the illumination of the algae in W/m\u00b2 Returns The illumination factor as a pandas series","title":"calculate_illumination_factor"},{"location":"modules/src/model/seaweed_growth/#temperature_single_value","text":"source .temperature_single_value( temperature: float ) Calculates the temperature factor for a single value based on an empirical model Arguments temperature : the temperature of the water in \u00b0C Returns The temperature factor as a float","title":"temperature_single_value"},{"location":"modules/src/model/seaweed_growth/#calculate_temperature_factor","text":"source .calculate_temperature_factor( temperature: pd.Series ) Calculates the temperature factor for a whole dataframe column Arguments temperature : the temperature of the water in celcius Returns The temperature factor as a pandas series","title":"calculate_temperature_factor"},{"location":"modules/src/model/seaweed_growth/#nitrate_subfactor","text":"source .nitrate_subfactor( nitrate ) Calculates the nitrate subfactor for a single value Arguments nitrate : the nitrate concentration in mmol/m\u00b3 Returns The nitrate subfactor as a float","title":"nitrate_subfactor"},{"location":"modules/src/model/seaweed_growth/#phosphate_subfactor","text":"source .phosphate_subfactor( phosphate ) Calculates the phosphate subfactor for a single value Arguments phosphate : the phosphate concentration in mmol/m\u00b3 Returns The phosphate subfactor as a float","title":"phosphate_subfactor"},{"location":"modules/src/model/seaweed_growth/#ammonium_subfactor","text":"source .ammonium_subfactor( ammonium ) Calculates the ammonium subfactor for a single value Arguments ammonium : the ammonium concentration in mmol/m\u00b3 Returns The ammonium subfactor as a float","title":"ammonium_subfactor"},{"location":"modules/src/model/seaweed_growth/#calculate_nutrient_factor","text":"source .calculate_nutrient_factor( nitrate: pd.Series, ammonium: pd.Series, phosphate: pd.Series ) Calculates the nutrient factor for a whole series And returns the nutrient factor as a pandas series Arguments nitrate : the nitrate concentration in mmol/m\u00b3 ammonium : the ammonium concentration in mmol/m\u00b3 phosphate : the phosphate concentration in mmol/m\u00b3 Returns nutrient_factor : The nutrient factor as a pd.Series nitrate_subfactor: The nitrate subfactor as a pd.Series ammonium_subfactor: The ammonium subfactor as a pd.Series phosphate_subfactor: The phosphate subfactor as a pd.Series List of:","title":"calculate_nutrient_factor"},{"location":"modules/src/model/seaweed_growth/#salinity_single_value","text":"source .salinity_single_value( salinity: float ) Calculates the salinity factor for a single salinity value based on an empirical model Arguments salinity : the salinity of the water Returns The salinity factor as a float","title":"salinity_single_value"},{"location":"modules/src/model/seaweed_growth/#calculate_salinity_factor","text":"source .calculate_salinity_factor( salinity: pd.Series ) Calculates the salinity factor for a whole dataframe Arguments salinity : the salinity of the water in ppt Returns The salinity factor as a pandas series","title":"calculate_salinity_factor"},{"location":"modules/src/model/seaweed_model/","text":"SeaweedModel source Wrapper class that encapsulates the model and is meant to provide a simple interface. Methods: .add_data_by_lme source .add_data_by_lme( lme_names, file ) Adds data from the database to the model. Based on a LME. Arguments lme_names : a list of LME names Returns None .add_data_by_grid source .add_data_by_grid( file ) Adds data from the database to the model. Based on a grid. Arguments lat_lons : a list of lat_lon tuples file : the file to read the data from Returns None .calculate_factors source .calculate_factors() Calculates the growth factors for the model for all ocean sections (either grid or LME). Arguments None Returns None .calculate_growth_rate source .calculate_growth_rate() Calculates the growth rate for the model for all ocean sections (either grid or LME). Arguments None Returns None .create_section_dfs source .create_section_dfs() Creates a dataframe for each section in the model. Arguments None Returns None .construct_df_from_sections_for_date source .construct_df_from_sections_for_date( months ) Constructs a dataframe from the data in the model for a given date. This uses the months since the beginning of the nuclear war. Mininum is -3, as the data starts before the war. Maximum is 357, as the data ends after the war. Arguments months : the months since the beginning of the nuclear war Returns a dataframe for the values at the given month .construct_df_for_parameter source .construct_df_for_parameter( parameter ) Constructs a dataframe that contains complete time series of a given parameter for all sections in the model. Arguments parameter : the parameter to construct the dataframe for Returns a dataframe with the date as index and the sections as columns","title":"seaweed_model"},{"location":"modules/src/model/seaweed_model/#_1","text":"","title":""},{"location":"modules/src/model/seaweed_model/#seaweedmodel","text":"source Wrapper class that encapsulates the model and is meant to provide a simple interface. Methods:","title":"SeaweedModel"},{"location":"modules/src/model/seaweed_model/#add_data_by_lme","text":"source .add_data_by_lme( lme_names, file ) Adds data from the database to the model. Based on a LME. Arguments lme_names : a list of LME names Returns None","title":".add_data_by_lme"},{"location":"modules/src/model/seaweed_model/#add_data_by_grid","text":"source .add_data_by_grid( file ) Adds data from the database to the model. Based on a grid. Arguments lat_lons : a list of lat_lon tuples file : the file to read the data from Returns None","title":".add_data_by_grid"},{"location":"modules/src/model/seaweed_model/#calculate_factors","text":"source .calculate_factors() Calculates the growth factors for the model for all ocean sections (either grid or LME). Arguments None Returns None","title":".calculate_factors"},{"location":"modules/src/model/seaweed_model/#calculate_growth_rate","text":"source .calculate_growth_rate() Calculates the growth rate for the model for all ocean sections (either grid or LME). Arguments None Returns None","title":".calculate_growth_rate"},{"location":"modules/src/model/seaweed_model/#create_section_dfs","text":"source .create_section_dfs() Creates a dataframe for each section in the model. Arguments None Returns None","title":".create_section_dfs"},{"location":"modules/src/model/seaweed_model/#construct_df_from_sections_for_date","text":"source .construct_df_from_sections_for_date( months ) Constructs a dataframe from the data in the model for a given date. This uses the months since the beginning of the nuclear war. Mininum is -3, as the data starts before the war. Maximum is 357, as the data ends after the war. Arguments months : the months since the beginning of the nuclear war Returns a dataframe for the values at the given month","title":".construct_df_from_sections_for_date"},{"location":"modules/src/model/seaweed_model/#construct_df_for_parameter","text":"source .construct_df_for_parameter( parameter ) Constructs a dataframe that contains complete time series of a given parameter for all sections in the model. Arguments parameter : the parameter to construct the dataframe for Returns a dataframe with the date as index and the sections as columns","title":".construct_df_for_parameter"},{"location":"modules/src/plotting/plotter_grid/","text":"cluster_spatial source .cluster_spatial( growth_df, global_or_US, scenario ) Creates a spatial plot of the clusters Arguments growth_df : a dataframe of the growth rate global_or_US : a string of either \"global\" or \"US\" that indicates the scale Returns None, but saves the plot growth_rate_spatial_by_year source .growth_rate_spatial_by_year( growth_df, global_or_US, scenario, optimal_growth_rate ) Plots the growth rate by year. This includes the first three months without nuclear war, in the case of the first year Arguments growth_df : a dataframe of the growth rate Returns None, but saves the plot cluster_timeseries_all_parameters_q_lines source .cluster_timeseries_all_parameters_q_lines( parameters, global_or_US, scenario, areas ) Plots line plots for all clusters and all parameters Arguments parameters : a dictionary of dataframes of all parameters Returns None, but saves the plot compare_nw_scenarios source .compare_nw_scenarios( areas, optimal_growth_rate ) Compares the results of the nuclear war scenarios as weigthed median Arguments areas : A dataframe containing the area of each grid cell eez : A eez around coastlines to only use those areas Returns None compare_nutrient_subfactors source .compare_nutrient_subfactors( nitrate, ammonium, phosphate, scenario, areas ) Takes the weighted average of the nutrient subfactors globally and plots them in the same plot to be able to compare them. Arguments nitrate : The nitrate subfactor ammonium : The ammonium subfactor phosphate : The phosphate subfactor scenario : The scenario to plot areas : The areas of the grid cells Returns None","title":"plotter_grid"},{"location":"modules/src/plotting/plotter_grid/#_1","text":"","title":""},{"location":"modules/src/plotting/plotter_grid/#cluster_spatial","text":"source .cluster_spatial( growth_df, global_or_US, scenario ) Creates a spatial plot of the clusters Arguments growth_df : a dataframe of the growth rate global_or_US : a string of either \"global\" or \"US\" that indicates the scale Returns None, but saves the plot","title":"cluster_spatial"},{"location":"modules/src/plotting/plotter_grid/#growth_rate_spatial_by_year","text":"source .growth_rate_spatial_by_year( growth_df, global_or_US, scenario, optimal_growth_rate ) Plots the growth rate by year. This includes the first three months without nuclear war, in the case of the first year Arguments growth_df : a dataframe of the growth rate Returns None, but saves the plot","title":"growth_rate_spatial_by_year"},{"location":"modules/src/plotting/plotter_grid/#cluster_timeseries_all_parameters_q_lines","text":"source .cluster_timeseries_all_parameters_q_lines( parameters, global_or_US, scenario, areas ) Plots line plots for all clusters and all parameters Arguments parameters : a dictionary of dataframes of all parameters Returns None, but saves the plot","title":"cluster_timeseries_all_parameters_q_lines"},{"location":"modules/src/plotting/plotter_grid/#compare_nw_scenarios","text":"source .compare_nw_scenarios( areas, optimal_growth_rate ) Compares the results of the nuclear war scenarios as weigthed median Arguments areas : A dataframe containing the area of each grid cell eez : A eez around coastlines to only use those areas Returns None","title":"compare_nw_scenarios"},{"location":"modules/src/plotting/plotter_grid/#compare_nutrient_subfactors","text":"source .compare_nutrient_subfactors( nitrate, ammonium, phosphate, scenario, areas ) Takes the weighted average of the nutrient subfactors globally and plots them in the same plot to be able to compare them. Arguments nitrate : The nitrate subfactor ammonium : The ammonium subfactor phosphate : The phosphate subfactor scenario : The scenario to plot areas : The areas of the grid cells Returns None","title":"compare_nutrient_subfactors"},{"location":"modules/src/plotting/plotter_lme/","text":"cluster_timeseries_all_parameters_q_lines source .cluster_timeseries_all_parameters_q_lines( parameters, lme, lme_dict ) Plots line plots for all clusters and all parameters Arguments parameters : a dictionary of dataframes of all parameters lme : an integer of the LME number lme_dict : a dictionary of LME names Returns None, but saves the plot create_name_dict source .create_name_dict() Creates a lookup dictionary for the LME names Arguments None Returns A dictionary with LME names","title":"plotter_lme"},{"location":"modules/src/plotting/plotter_lme/#_1","text":"","title":""},{"location":"modules/src/plotting/plotter_lme/#cluster_timeseries_all_parameters_q_lines","text":"source .cluster_timeseries_all_parameters_q_lines( parameters, lme, lme_dict ) Plots line plots for all clusters and all parameters Arguments parameters : a dictionary of dataframes of all parameters lme : an integer of the LME number lme_dict : a dictionary of LME names Returns None, but saves the plot","title":"cluster_timeseries_all_parameters_q_lines"},{"location":"modules/src/plotting/plotter_lme/#create_name_dict","text":"source .create_name_dict() Creates a lookup dictionary for the LME names Arguments None Returns A dictionary with LME names","title":"create_name_dict"},{"location":"modules/src/plotting/plotter_methods/","text":"plot_factors source .plot_factors() Plots the factors used in the model, with a range that fits to the factor Arguments None Returns None","title":"plotter_methods"},{"location":"modules/src/plotting/plotter_methods/#_1","text":"","title":""},{"location":"modules/src/plotting/plotter_methods/#plot_factors","text":"source .plot_factors() Plots the factors used in the model, with a range that fits to the factor Arguments None Returns None","title":"plot_factors"},{"location":"modules/src/processing/postprocessing/","text":"get_parameter_dataframe source .get_parameter_dataframe( parameter, path, file ) Initializes the seaweed model and returns the dataframe with the parameter for all the grid sections Arguments parameter : the parameter to construct the dataframe for path : The path to the file file : The file name Returns df : pandas.DataFrame time_series_analysis source .time_series_analysis( growth_df, n_clusters, global_or_US ) Does time series analysis on the dataframe All the time serieses are clustered based on their overall shape using k-means Inspired by this article: https://www.kaggle.com/code/izzettunc/introduction-to-time-series-clustering/notebook Arguments growth_df : pandas.DataFrame n_clusters : int - the number of clusters to use Returns labels : list - the labels for each time series km : TimeSeriesKMeans - the k-means object elbow_method source .elbow_method( growth_df, max_clusters, global_or_US, scenario ) Finds the optimal number of clusters using the elbow method https://predictivehacks.com/k-means-elbow-method-code-for-python/ Arguments growth_df : pandas.DataFrame max_clusters : int - the maximum number of clusters to try Returns None, just plots the elbow method and saves it lme source .lme( scenario ) Calculates growth rate and all the factors for the lme and saves it in files appropriate for the plotting functions Arguments None Returns None grid source .grid( scenario, global_or_US, with_elbow_method = False ) Calculates growth rate and all the factors for the grid and saves it in files appropriate for the plotting functions Arguments None Returns None","title":"postprocessing"},{"location":"modules/src/processing/postprocessing/#_1","text":"","title":""},{"location":"modules/src/processing/postprocessing/#get_parameter_dataframe","text":"source .get_parameter_dataframe( parameter, path, file ) Initializes the seaweed model and returns the dataframe with the parameter for all the grid sections Arguments parameter : the parameter to construct the dataframe for path : The path to the file file : The file name Returns df : pandas.DataFrame","title":"get_parameter_dataframe"},{"location":"modules/src/processing/postprocessing/#time_series_analysis","text":"source .time_series_analysis( growth_df, n_clusters, global_or_US ) Does time series analysis on the dataframe All the time serieses are clustered based on their overall shape using k-means Inspired by this article: https://www.kaggle.com/code/izzettunc/introduction-to-time-series-clustering/notebook Arguments growth_df : pandas.DataFrame n_clusters : int - the number of clusters to use Returns labels : list - the labels for each time series km : TimeSeriesKMeans - the k-means object","title":"time_series_analysis"},{"location":"modules/src/processing/postprocessing/#elbow_method","text":"source .elbow_method( growth_df, max_clusters, global_or_US, scenario ) Finds the optimal number of clusters using the elbow method https://predictivehacks.com/k-means-elbow-method-code-for-python/ Arguments growth_df : pandas.DataFrame max_clusters : int - the maximum number of clusters to try Returns None, just plots the elbow method and saves it","title":"elbow_method"},{"location":"modules/src/processing/postprocessing/#lme","text":"source .lme( scenario ) Calculates growth rate and all the factors for the lme and saves it in files appropriate for the plotting functions Arguments None Returns None","title":"lme"},{"location":"modules/src/processing/postprocessing/#grid","text":"source .grid( scenario, global_or_US, with_elbow_method = False ) Calculates growth rate and all the factors for the grid and saves it in files appropriate for the plotting functions Arguments None Returns None","title":"grid"},{"location":"modules/src/processing/preprocessing/","text":"get_area source .get_area( path, file ) Gets the file with all the areas for grid_cells and saves it as a csv Arguments path : path to the file file : filename Returns None prepare_gridded_data source .prepare_gridded_data( path, folder, scenario, file_ending, global_or_US ) Reads in the pickles of the geodataframes of the different environmental paramters. Checks if they all have the same geometry and reorders them to fit the rest of the code. Arguments path : the path for the pickled files folder : the folder where the pickled files are file_ending : the ending of the pickled files global_or_US : if \"global\", the global data is used scenario : the scenario to use (e.g. 150tg) Returns None, but saves a pickle of the dictionary of geo dataframes. Each geodataframe is assigned a key consisting of a tuple of floats of the latitude and longitude.","title":"preprocessing"},{"location":"modules/src/processing/preprocessing/#_1","text":"","title":""},{"location":"modules/src/processing/preprocessing/#get_area","text":"source .get_area( path, file ) Gets the file with all the areas for grid_cells and saves it as a csv Arguments path : path to the file file : filename Returns None","title":"get_area"},{"location":"modules/src/processing/preprocessing/#prepare_gridded_data","text":"source .prepare_gridded_data( path, folder, scenario, file_ending, global_or_US ) Reads in the pickles of the geodataframes of the different environmental paramters. Checks if they all have the same geometry and reorders them to fit the rest of the code. Arguments path : the path for the pickled files folder : the folder where the pickled files are file_ending : the ending of the pickled files global_or_US : if \"global\", the global data is used scenario : the scenario to use (e.g. 150tg) Returns None, but saves a pickle of the dictionary of geo dataframes. Each geodataframe is assigned a key consisting of a tuple of floats of the latitude and longitude.","title":"prepare_gridded_data"},{"location":"modules/src/processing/read_files/","text":"DataLME source DataLME( file ) Creates a data object for the LME Meant to only read in the data once and provide the data for each LME as needed Methods: .read_data_lme source .read_data_lme() read in the file Arguments None Returns None .sort_data_lme source .sort_data_lme() Sorts as a dictionary of pandas dataframes The data is ocean data after nuclear war seperated by Large Marine Ecosystems (LME) Arguments None Returns None .provide_data_lme source .provide_data_lme( lme_number ) Provides the data for a given LME Arguments lme_number : the LME number Returns a dataframe DataGrid source DataGrid( file ) Creates a data object for the gridded data Meant to only read in the data once and provide the data for each grid cell as needed Methods: .read_data_grid source .read_data_grid() Reads in the gridded data Arguments None Returns None .provide_data_grid source .provide_data_grid( lat_lon ) Provides the data for a given grid cell Arguments lat_lon : the lat_lon coordinates as tuple of floats Returns a geodataframe with all the environmental data for this grid cell read_area_file source .read_area_file( path, file ) Reads in the area file Arguments file : the file to read in Returns a dataframe with the area of each LME","title":"read_files"},{"location":"modules/src/processing/read_files/#_1","text":"","title":""},{"location":"modules/src/processing/read_files/#datalme","text":"source DataLME( file ) Creates a data object for the LME Meant to only read in the data once and provide the data for each LME as needed Methods:","title":"DataLME"},{"location":"modules/src/processing/read_files/#read_data_lme","text":"source .read_data_lme() read in the file Arguments None Returns None","title":".read_data_lme"},{"location":"modules/src/processing/read_files/#sort_data_lme","text":"source .sort_data_lme() Sorts as a dictionary of pandas dataframes The data is ocean data after nuclear war seperated by Large Marine Ecosystems (LME) Arguments None Returns None","title":".sort_data_lme"},{"location":"modules/src/processing/read_files/#provide_data_lme","text":"source .provide_data_lme( lme_number ) Provides the data for a given LME Arguments lme_number : the LME number Returns a dataframe","title":".provide_data_lme"},{"location":"modules/src/processing/read_files/#datagrid","text":"source DataGrid( file ) Creates a data object for the gridded data Meant to only read in the data once and provide the data for each grid cell as needed Methods:","title":"DataGrid"},{"location":"modules/src/processing/read_files/#read_data_grid","text":"source .read_data_grid() Reads in the gridded data Arguments None Returns None","title":".read_data_grid"},{"location":"modules/src/processing/read_files/#provide_data_grid","text":"source .provide_data_grid( lat_lon ) Provides the data for a given grid cell Arguments lat_lon : the lat_lon coordinates as tuple of floats Returns a geodataframe with all the environmental data for this grid cell","title":".provide_data_grid"},{"location":"modules/src/processing/read_files/#read_area_file","text":"source .read_area_file( path, file ) Reads in the area file Arguments file : the file to read in Returns a dataframe with the area of each LME","title":"read_area_file"}]}